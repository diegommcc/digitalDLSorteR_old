theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 12),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# data <- data.frame(sim.seuratSC.Scaled.ex@reductions$tSNE.Final@cell.embeddings)
shape.cells <- factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas"))
matches <- match(sce.final$Cell_ID, tSneDf$CellNames)
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled.ex@reductions$tSNE.Final@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled.ex@reductions$tSNE.Final@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas")),
Cell_type = sce.final$Cell_type_main[matches]
)
saveRDS(df.final, file.path(pathWD, "tsne.model.generic.scaled.rds"))
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("tSNE de la simulación de células (modelo específico)") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1),
shape = guide_legend(title = "Simuladas",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# ggplot(data.frame(sim.seuratSC.Scaled.ex@reductions$tSNE.Final@cell.embeddings),
#        aes(x = tSNE_1, y = tSNE_2, color = cellsMetadata.sim1$Cell_type,
#            shape = shape.cells)) +
#   geom_point(size = 3) + scale_color_manual(values = color.list) +
#   scale_shape_manual(values = c(19, 1)) + ggtitle("Simulation 1") +
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), legend.key=element_blank(),
#         axis.line = element_line(colour = "black"), legend.title = element_blank(),
#         text = element_text(size=15), plot.title = element_text(size = 16, face = "bold"))
# data <- data.frame(sim.seuratSC.Scaled.ex@reductions$tSNE.Final@cell.embeddings)
shape.cells <- factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas"))
matches <- match(sce.final$Cell_ID, tSneDf$CellNames)
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled.ex@reductions$tSNE.Final@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled.ex@reductions$tSNE.Final@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas")),
Cell_type = sce.final$Cell_type_main[matches],
Cell_type_fine = sce.final$Cell_type[matches]
)
saveRDS(df.final, file.path(pathWD, "tsne.model.generic.scaled.rds"))
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("tSNE de la simulación de células (modelo específico)") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1),
shape = guide_legend(title = "Simuladas",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# ggplot(data.frame(sim.seuratSC.Scaled.ex@reductions$tSNE.Final@cell.embeddings),
#        aes(x = tSNE_1, y = tSNE_2, color = cellsMetadata.sim1$Cell_type,
#            shape = shape.cells)) +
#   geom_point(size = 3) + scale_color_manual(values = color.list) +
#   scale_shape_manual(values = c(19, 1)) + ggtitle("Simulation 1") +
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), legend.key=element_blank(),
#         axis.line = element_line(colour = "black"), legend.title = element_blank(),
#         text = element_text(size=15), plot.title = element_text(size = 16, face = "bold"))
pathWD
devtools::document()
devtools::load_all(".")
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLS.Chung.SC.Final.rds"))
DDLS.Chung.1
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.DNN.onlyBulk.rds"))
model.breast.chung.def <- trained.model(DDLS.Chung.1)
model.breast.chung.def
model.breast.chung.def@model
.saveModelToJSON(model.breast.chung.def)
breast.chung.specific <- trained.model(DDLS.Chung.1)
usethis::use_data(breast.chung.specific, overwrite = TRUE)
usethis::proj_set("/home/dmananesc/Documents/PackagesR/digitalDLSorteR/")
usethis::use_data(breast.chung.specific, overwrite = TRUE)
DDLS.Chung.1
DDLS.Chung.1@prob.cell.types
DDLS.Chung.1@prob.cell.types$train
DDLS.Chung.1@prob.cell.types$train@plots
DDLS.Chung.1@prob.cell.types$train@cell.names
plots.train <- DDLS.Chung.1@prob.cell.types$train@plots
plots.test <- DDLS.Chung.1@prob.cell.types$test@plots
matrix.train <- DDLS.Chung.1@prob.cell.typestraintest@prob.matrix
plots.train <- DDLS.Chung.1@prob.cell.types$train@plots
plots.test <- DDLS.Chung.1@prob.cell.types$test@plots
matrix.train <- DDLS.Chung.1@prob.cell.types$train@prob.matrix
matrix.test <- DDLS.Chung.1@prob.cell.types$test@prob.matrix
set.list.train <- DDLS.Chung.1@prob.cell.types$train@set.list
set.list.test <- DDLS.Chung.1@prob.cell.types$test@set.list
set.train <- DDLS.Chung.1@prob.cell.types$train@set
set.test <- DDLS.Chung.1@prob.cell.types$test@set
cell.names.train <- DDLS.Chung.1@prob.cell.types$train@cell.names
cell.names.test <- DDLS.Chung.1@prob.cell.types$test@cell.names
list.train <- list(plots.train, matrix.train, set.list.train, set.train, cell.names.train)
list.test <- list(plots.test, matrix.test, set.list.test, set.test, cell.names.test)
saveRDS(list.train, file = file.path(pathWD, "list.train.probs.rds"))
saveRDS(list.test, file = file.path(pathWD, "list.test.probs.rds"))
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.3.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLS.Chung.ex <- readRDS(file.path(pathWD, "DDLS.Chung.ex.def.DNN.onlyBulk.rds"))
trained.model(DDLS.Chung.1)
trained.model(DDLS.Chung.ex)
# model.breast.chung.def <- .saveModelToJSON(model.breast.chung.def)
breast.chung.generic <- trained.model(DDLS.Chung.ex)
usethis::use_data(breast.chung.generic, overwrite = TRUE)
devtools::load_all(".")
devtools::document()
## Entrenamiento red neuronal
tensorflow::tf$compat$v1$disable_eager_execution()
DDLS.Chung.ex <- readRDS(file.path(pathWD, "DDLS.Chung.ex.def.DNN.onlyBulk.rds"))
plots.train <- DDLS.Chung.ex@prob.cell.types$train@plots
plots.test <- DDLS.Chung.ex@prob.cell.types$test@plots
matrix.train <- DDLS.Chung.ex@prob.cell.types$train@prob.matrix
matrix.test <- DDLS.Chung.ex@prob.cell.types$test@prob.matrix
set.list.train <- DDLS.Chung.ex@prob.cell.types$train@set.list
set.list.test <- DDLS.Chung.ex@prob.cell.types$test@set.list
set.train <- DDLS.Chung.ex@prob.cell.types$train@set
set.test <- DDLS.Chung.ex@prob.cell.types$test@set
cell.names.train <- DDLS.Chung.ex@prob.cell.types$train@cell.names
cell.names.test <- DDLS.Chung.ex@prob.cell.types$test@cell.names
list.train <- list(plots.train, matrix.train, set.list.train, set.train, cell.names.train)
list.test <- list(plots.test, matrix.test, set.list.test, set.test, cell.names.test)
saveRDS(list.train, file = file.path(pathWD, "list.train.probs.generic.rds"))
saveRDS(list.test, file = file.path(pathWD, "list.test.probs.generic.rds"))
plots.train <- DDLS.Chung.ex@prob.cell.types$train@plots
plots.test <- DDLS.Chung.ex@prob.cell.types$test@plots
matrix.train <- DDLS.Chung.ex@prob.cell.types$train@prob.matrix
matrix.test <- DDLS.Chung.ex@prob.cell.types$test@prob.matrix
set.list.train <- DDLS.Chung.ex@prob.cell.types$train@set.list
set.list.test <- DDLS.Chung.ex@prob.cell.types$test@set.list
set.train <- DDLS.Chung.ex@prob.cell.types$train@set
set.test <- DDLS.Chung.ex@prob.cell.types$test@set
cell.names.train <- DDLS.Chung.ex@prob.cell.types$train@cell.names
cell.names.test <- DDLS.Chung.ex@prob.cell.types$test@cell.names
plots.train
list.train <- list(plots.train, matrix.train, set.list.train, set.train, cell.names.train)
list.test <- list(plots.test, matrix.test, set.list.test, set.test, cell.names.test)
saveRDS(list.train, file = file.path(pathWD, "list.train.probs.generic.rds"))
saveRDS(list.test, file = file.path(pathWD, "list.test.probs.generic.rds"))
DDLS.Chung.1
trained.model(DDLS.Chung.1)
DDLS.Chung.1@trained.model@training.history
DDLS.Chung.1@trained.model@training.history$params
DDLS.Chung.1@trained.model@training.history$metrics
DDLS.Chung.1@trained.model@eval.stats.model
DDLS.Chung.1@trained.model@cell.types
DDLS.Chung.1@trained.model@training.history
DDLS.Chung.1@trained.model@training.history$params
DDLS.Chung.1@trained.model@eval.stats.model
list.dnn.fine <- list(params.dnn, evol.metrics, eval.stats)
params.dnn <- DDLS.Chung.1@trained.model@training.history$params
evol.metrics <- DDLS.Chung.1@trained.model@training.history$metrics
eval.stats <- DDLS.Chung.1@trained.model@eval.stats.model
list.dnn.fine <- list(params.dnn, evol.metrics, eval.stats)
params.dnn <- DDLS.Chung.1@trained.model@training.history$params
evol.metrics <- DDLS.Chung.1@trained.model@training.history$metrics
eval.stats <- DDLS.Chung.1@trained.model@eval.stats.model
list.dnn.fine <- list(params.dnn, evol.metrics, eval.stats)
saveRDS(list.dnn.fine, file = file.path(pathWD, "list.dnn.fine.rds"))
params.dnn <- DDLS.Chung.ex@trained.model@training.history$params
evol.metrics <- DDLS.Chung.ex@trained.model@training.history$metrics
eval.stats <- DDLS.Chung.ex@trained.model@eval.stats.model
list.dnn.generic <- list(params.dnn, evol.metrics, eval.stats)
saveRDS(list.dnn.generic, file = file.path(pathWD, "list.dnn.generic.rds"))
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLSChung.1.eval <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
?trainDigitalDLSorterModel
rm(DDLSChung.1.eval)
DDLSChung.1.val <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
DDLSChung.1.val
tensorflow::tf$compat$v1$disable_eager_execution()
DDLS.Chung.1.val <- trainDigitalDLSorterModel(
object = DDLS.Chung.1.val,
batch.size = 128,
num.epochs = 30,
val = TRUE,
freq.val = 0.1
)
DDLS.Chung.1.val <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
rm(DDLSChung.1.val)
tensorflow::tf$compat$v1$disable_eager_execution()
DDLS.Chung.1.val <- trainDigitalDLSorterModel(
object = DDLS.Chung.1.val,
batch.size = 128,
num.epochs = 30,
val = TRUE,
freq.val = 0.1
)
devtools::load_all(".")
DDLS.Chung.1.val <- trainDigitalDLSorterModel(
object = DDLS.Chung.1.val,
batch.size = 128,
num.epochs = 30,
val = TRUE,
freq.val = 0.1
)
saveRDS(DDLS.Chung.1.val,
file.path(pathWD, "DDLS.Chung.1.def.DNN.onlyBulk.val.rds"))
saveTrainedModelAsH5(DDLSChung.1.val, file.path = file.path(pathWD, "model.onlyBulk.1.val.h5"))
saveTrainedModelAsH5(DDLS.Chung.1.val, file.path = file.path(pathWD, "model.onlyBulk.1.val.h5"))
DDLS.Chung.1.val <- calculateEvalMetrics(DDLS.Chung.1.val)
plotDistError(
DDLS.Chung.1.val,
error = "AbsErr",
facet.by = "nMix",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 0.29,
theme = theme_bw(),
ylimit = 0.32
)
plotDistError(
DDLS.Chung.1.val,
error = "ppAbsErr",
facet.by = "nMix",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 1.1,
theme = theme_bw(),
ylimit = 1
)
plotDistError(
DDLS.Chung.1.val,
error = "AbsErr",
facet.by = "CellType",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 0.29,
theme = theme_bw(),
ylimit = 0.32
)
plotDistError(
DDLS.Chung.1.val,
error = "ppAbsErr",
facet.by = "CellType",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 1.1,
theme = theme_bw(),
ylimit = 1
)
plotDistError(
DDLS.Chung.1.val,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType",
error.labels = TRUE,
pos.y.label = 0.2
)
plotDistError(
DDLS.Chung.1.val,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType",
pos.y.label = 0.2
)
plotDistError(
DDLS.Chung.1.val,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType",
pos.y.label = 0.2
)
plotDistError(
DDLS.Chung.1.val,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType",
pos.y.label = 0.3
)
corrExpPredPlot(
DDLS.Chung.1.val,
facet.by = "CellType",
color.by = "CellType",
theme = theme_bw(),
corr = "pearson"
)
corrExpPredPlot(
DDLS.Chung.1.val,
facet.by = "CellType",
color.by = "CellType",
theme = theme_bw(),
corr = "ccc",
pos.x.label = 0.5,
pos.y.label = 0.92
)
corrExpPredPlot(
DDLS.Chung.1.val,
facet.by = "nMix",
color.by = "CellType",
theme = theme_bw()
)
corrExpPredPlot(
DDLS.Chung.1.val,
facet.by = "nMix",
color.by = "CellType",
theme = theme_bw(),
corr = "ccc",
pos.x.label = 0.5,
pos.y.label = 0.92
)
corrExpPredPlot(
DDLS.Chung.1.val,
facet.by = NULL,
color.by = "CellType",
theme = theme_linedraw(),
corr = "pearson",
pos.x.label = 0.2
)
corrExpPredPlot(
DDLS.Chung.1.val,
facet.by = NULL,
color.by = "CellType",
theme = theme_linedraw(),
corr = "ccc",
pos.x.label = 0.2
)
DDLSChung.1.30 <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLSChung.1.30 <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
## Entrenamiento red neuronal
tensorflow::tf$compat$v1$disable_eager_execution()
DDLS.Chung.1.35 <- trainDigitalDLSorterModel(
object = DDLS.Chung.1.30,
batch.size = 128,
num.epochs = 35
)
DDLSChung.1.30 <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
DDLS.Chung.1.35 <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
rm(DDLSChung.1.30)
## Entrenamiento red neuronal
tensorflow::tf$compat$v1$disable_eager_execution()
DDLS.Chung.1.35 <- trainDigitalDLSorterModel(
object = DDLSChung.1.30,
batch.size = 128,
num.epochs = 35
)
DDLS.Chung.1.35 <- trainDigitalDLSorterModel(
object = DDLS.Chung.1.35,
batch.size = 128,
num.epochs = 35
)
saveRDS(DDLS.Chung.1.35,
file.path(pathWD, "DDLS.Chung.1.def.DNN.onlyBulk.35.rds"))
saveTrainedModelAsH5(DDLS.Chung.1.35, file.path = file.path(pathWD, "model.DDLSChung.1.35.h5"))
DDLS.Chung.1.35
DDLS.Chung.1.35 <- calculateEvalMetrics(DDLS.Chung.1.35)
plotDistError(
DDLS.Chung.1.35,
error = "AbsErr",
facet.by = "nMix",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 0.29,
theme = theme_bw(),
ylimit = 0.32
)
plotDistError(
DDLS.Chung.1.35,
error = "ppAbsErr",
facet.by = "nMix",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 1.1,
theme = theme_bw(),
ylimit = 1
)
plotDistError(
DDLS.Chung.1.35,
error = "AbsErr",
facet.by = "CellType",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 0.29,
theme = theme_bw(),
ylimit = 0.32
)
plotDistError(
DDLS.Chung.1.35,
error = "ppAbsErr",
facet.by = "CellType",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 1.1,
theme = theme_bw(),
ylimit = 1
)
plotDistError(
DDLS.Chung.1.35,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType",
error.labels = TRUE,
pos.y.label = 0.2
)
plotDistError(
DDLS.Chung.1.35,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType",
pos.y.label = 0.2
)
plotDistError(
DDLS.Chung.1.35,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType",
pos.y.label = 0.2
)
plotDistError(
DDLS.Chung.1.35,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType",
pos.y.label = 0.3
)
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.2 <- readRDS(file.path(pathWD, "DDLS.Chung.2.def.DNN.combined.rds"))
DDLS.Chung.2
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLS.Chung.1
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.DNN.onlyBulk.rds"))
DDLS.Chung.1
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.3 <- readRDS(file.path(pathWD, "DDLS.Chung.3.def.DNN.onlySC.rds"))
DDLS.Chung.3
DDLS.Chung.3@trained.model@eval.stats.model
DDLS.Chung.3@trained.model@training.history
DDLS.Chung.3@trained.model@training.history$metrics
DDLS.Chung.1.35 <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
DDLS.Chung.1.45
DDLS.Chung.1.45 <- readRDS(file.path(pathWD, "DDLS.Chung.1.def.prepared.onlyBulk.rds"))
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.3.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLS.Chung.ex <- readRDS(file.path(pathWD, "DDLS.Chung.ex.def.DNN.onlyBulk.rds"))
DDLS.Chung.ex
