z <- ceiling(10500 * y / 100)
sum(z)
z
y <- c(10, 17, 20, 8, 5, 40.5)
class(y)
stopifnot( all(y == floor(y)) )
all(y == floor(y))
floor(y)
sapply(c(x, y), function(z) all(z == floor(z)))
lapply(list(x, y), function(z) all(z == floor(z)))
if (!all(lapply(list(x, y), function(z) all(z == floor(z)))))
if (!all(lapply(list(x, y), function(z) all(z == floor(z))))) {
stop("fcvgbhnj")
}
if (!all(lapply(list(x, y), function(z) all(z == floor(z))))) {
stop("fcvgbhnj")
}
if (!all(unlist(lapply(list(x, y), function(z) all(z == floor(z)))))) {
stop("fcvgbhnj")
}
y <- c(10, 17, 20, 8, 5, 40)
if (!all(unlist(lapply(list(x, y), function(z) all(z == floor(z)))))) {
stop("fcvgbhnj")
}
sum(c(1150, 1700, 150, 150, 3000, 1000))
y <- c(10, 15, 20, 10, 5, 40)
sum(y)
devtools::load_all(".")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
prob.design = probMatrix,
verbose = TRUE
)
lapply(1:6, function(x) {
showProbPlot(DDLS.Chung.prob.new.2.prueba,
type.data = "train", set = x, type.plot = "boxplot")
})
939 + 7510 + 1878 + 3755 + 2817 + 1878
lapply(1:6, function(x) {
showProbPlot(DDLS.Chung.prob.new.2.prueba,
type.data = "test", set = x, type.plot = "boxplot")
})
939 + 7510 + 1878 + 3755 + 2817 + 1878
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.prob.new.onlyBulk <- readRDS(file.path(pathWD, "DDLS.Chung.prob.new.onlyBulk.rds"))
lapply(1:6, function(x) {
showProbPlot(DDLS.Chung.prob.new.onlyBulk,
type.data = "train", set = x, type.plot = "boxplot")
})
DDLS.Chung.prob.new.onlyBulk
lapply(1:6, function(x) {
showProbPlot(DDLS.Chung.prob.new.2.prueba,
type.data = "test", set = x, type.plot = "boxplot")
})
DDLS.Chung.prob.new.2.prueba@prob.cell.types$train@prob.matrix
DIM(DDLS.Chung.prob.new.2.prueba@prob.cell.types$train@prob.matrix)
dim(DDLS.Chung.prob.new.2.prueba@prob.cell.types$train@prob.matrix)
dim(DDLS.Chung.prob.new.onlyBulk@prob.cell.types$train@prob.matrix)
dim(DDLS.Chung.prob.new.onlyBulk@prob.cell.types$test@prob.matrix)
dim(DDLS.Chung.prob.new.2.prueba@prob.cell.types$test@prob.matrix)
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
num.bulk.samples = 20000,
prob.design = probMatrix,
verbose = TRUE
)
11910 + 6809
10500 + 7150
devtools::load_all(".")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
num.bulk.samples = 20000,
prob.design = probMatrix,
verbose = TRUE
)
devtools::load_all(".")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
num.bulk.samples = 20000,
prob.design = probMatrix,
verbose = TRUE
)
proportions.train = c(10, 15, 20, 10, 5, 40)
nums.test <- ceiling((7150 * proportions.train) / 100)
nums.test
sum(nums.test)
nums.test <- .setHundredLimit((7150 * proportions.train) / 100)
devtools::load_all(".")
nums.test <- .setHundredLimit((7150 * proportions.train) / 100, limit = 7150)
nums.test
proportions.train = c(10, 15, 20, 10, 5, 40)
nums.test <- .setHundredLimit(ceiling((7150 * proportions.train) / 100, limit = 7150))
nums.test <- .setHundredLimit(ceiling((7150 * proportions.train) / 100), limit = 7150))
nums.test <- .setHundredLimit(ceiling((7150 * proportions.train) / 100), limit = 7150)
sum(nums.test)
nums.test
sum(nums.test)
devtools::load_all(".")
devtools::load_all(".")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
num.bulk.samples = 20000,
prob.design = probMatrix,
verbose = TRUE
)
sum(11910 + 6809)
max(proportions.train)
which.max(proportions.train)
devtools::load_all(".")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
num.bulk.samples = 20000,
prob.design = probMatrix,
verbose = TRUE
)
11910 + 8090
lapply(1:6, function(x) {
showProbPlot(DDLS.Chung.prob.new.onlyBulk,
type.data = "train", set = x, type.plot = "boxplot")
})
lapply(1:6, function(x) {
showProbPlot(DDLS.Chung.prob.new.2.prueba,
type.data = "test", set = x, type.plot = "boxplot")
})
devtools::load_all(".")
lapply(1:6, function(x) {
showProbPlot(DDLS.Chung.prob.new.2.prueba,
type.data = "train", set = x, type.plot = "boxplot")
})
sum(c(10, 20, 15, 10, 40, 5))
devtools::load_all(".")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
num.bulk.samples = 20000,
prob.design = probMatrix,
verbose = TRUE
)
lapply(1:6, function(x) {
showProbPlot(DDLS.Chung.prob.new.2.prueba,
type.data = "train", set = x, type.plot = "boxplot")
})
DDLS.Chung.prob.new.2.prueba@prob.cell.types$train@prob.matrix
.boxPlot(DDLS.Chung.prob.new.2.prueba@prob.cell.types$train@prob.matrix)
.boxPlot(as.data.frame(DDLS.Chung.prob.new.2.prueba@prob.cell.types$train@prob.matrix))
.boxPlot(as.data.frame(DDLS.Chung.prob.new.2.prueba@prob.cell.types$train@prob.matrix), title = "")
df <- reshape2::melt(DDLS.Chung.prob.new.2.prueba@prob.cell.types$train@prob.matrix)
df
colnames(df) <- c("Sample", "CellType", "Prob")
.boxPlot(df, title = "hjk")
.boxPlot(df, title = "hjk")
DDLS.Chung.prob.new.onlyBulk
DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples
DDLS.Chung.prob.new.onlyBulk <- calculateEvalMetrics(DDLS.Chung.prob.new.onlyBulk)
DDLS.Chung.prob.new.onlyBulk@trained.model@predict.results
DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$filData$MAE$Sample
hist(DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$filData$MAE$Sample)
hist(as.matrix(DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$filData$MAE$Sample))
DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$filData$MAE$Sample
class(DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$filData$MAE$Sample)
hist
?hist
DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$raw$AbsErr
hist(DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$raw$AbsErr)
hist(DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$raw$AbsErr, freq = TRUE)
hist(DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$raw$AbsErr, breaks = 2)
hist(DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$raw$AbsErr, breaks = 5)
hist(DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$raw$AbsErr)
prob <- DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$raw$Prob
pred <- DDLS.Chung.prob.new.onlyBulk@trained.model@eval.stats.samples$raw$Pred
hist(prob - pred)
hist(prob - pred, freq = FALSE)
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
blandAltmanLehPlot(DDLS.Chung.prob.new.2.onlyBulk,
facet.by = "CellType",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.prob.new.1.onlyBulk,
facet.by = "CellType",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.prob.new.onlyBulk)
blandAltmanLehPlot(DDLS.Chung.prob.new.onlyBulk, facet.by = "cellType", color.by = "CellType")
blandAltmanLehPlot(DDLS.Chung.prob.new.onlyBulk, facet.by = "CellType", color.by = "CellType")
blandAltmanLehPlot(DDLS.Chung.prob.new.onlyBulk, facet.by = "CellType", color.by = "CellType", log.2 = FALSE)
blandAltmanLehPlot(DDLS.Chung.prob.new.onlyBulk, facet.by = "CellType", color.by = "CellType", log.2 = FALSE, filter.sc = TRUE)
blandAltmanLehPlot(DDLS.Chung.prob.new.onlyBulk, facet.by = "CellType", color.by = "CellType", log.2 = FALSE, filter.sc = TRUE)
install.packages("bench")
devtools::load_all(".")
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLSChung.zinb.new.1.rds"))
DDLS.Chung.1 <- simSingleCellProfiles(object = DDLS.Chung.1,
cell.ID.column = "Cell_ID",
cell.type.column = "Cell_type",
n.cells = 100,
verbose = TRUE)
probMatrix <- read.delim(file.path(pathWD, "probPriors.def.tsv"))
exclusive.types <- c("ER+", "HER2+", "ER+ and HER2+", "TNBC")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
prob.design = probMatrix,
verbose = TRUE
)
benchmark <- bench::mark(
onDisk = {
generateBulkSamples(
DDLS.Chung.prob.new.2,
threads = 2,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
generateBulkSamples(
DDLS.Chung.prob.new.2,
threads = 2,
type.data = "both"
)
}
)
benchmark <- bench::mark(
onDisk = {
generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 2,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 2,
type.data = "both"
)
}
)
benchmark <- bench::mark(
onDisk = {
generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}
)
benchmark
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLSChung.zinb.new.1.rds"))
DDLS.Chung.1 <- simSingleCellProfiles(object = DDLS.Chung.1,
cell.ID.column = "Cell_ID",
cell.type.column = "Cell_type",
n.cells = 100,
verbose = TRUE)
probMatrix <- read.delim(file.path(pathWD, "probPriors.def.tsv"))
exclusive.types <- c("ER+", "HER2+", "ER+ and HER2+", "TNBC")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
prob.design = probMatrix,
verbose = TRUE
)
benchmark <- bench::mark(
onDisk = {
x <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
y <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}
)
benchmark <- bench::mark(
onDisk = {
x <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
y <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}
)
?bench::mark
rm(ist = ls())
rm(list = ls())
devtools::load_all(".")
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLSChung.zinb.new.1.rds"))
DDLS.Chung.1 <- simSingleCellProfiles(object = DDLS.Chung.1,
cell.ID.column = "Cell_ID",
cell.type.column = "Cell_type",
n.cells = 100,
verbose = TRUE)
probMatrix <- read.delim(file.path(pathWD, "probPriors.def.tsv"))
exclusive.types <- c("ER+", "HER2+", "ER+ and HER2+", "TNBC")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
prob.design = probMatrix,
verbose = TRUE
)
benchmark <- bench::mark(
onDisk = {
x <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
y <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}, check = FALSE, memory = TRUE
)
benchmark <- bench::mark(
onDisk = {
x <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
y <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}, check = FALSE, memory = TRUE
)
devtools::load_all(".")
## benchmark simulation of bulk samples
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLSChung.zinb.new.1.rds"))
DDLS.Chung.1 <- simSingleCellProfiles(object = DDLS.Chung.1,
cell.ID.column = "Cell_ID",
cell.type.column = "Cell_type",
n.cells = 100,
verbose = TRUE)
probMatrix <- read.delim(file.path(pathWD, "probPriors.def.tsv"))
exclusive.types <- c("ER+", "HER2+", "ER+ and HER2+", "TNBC")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
prob.design = probMatrix,
verbose = TRUE
)
benchmark <- bench::mark(
onDisk = {
x <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
y <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}, check = FALSE, memory = TRUE, iterations = 1
)
## benchmark simulation of bulk samples
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLSChung.zinb.new.1.rds"))
DDLS.Chung.1 <- simSingleCellProfiles(object = DDLS.Chung.1,
cell.ID.column = "Cell_ID",
cell.type.column = "Cell_type",
n.cells = 100,
verbose = TRUE)
probMatrix <- read.delim(file.path(pathWD, "probPriors.def.tsv"))
exclusive.types <- c("ER+", "HER2+", "ER+ and HER2+", "TNBC")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
prob.design = probMatrix,
verbose = TRUE
)
benchmark <- bench::mark(
onDisk = {
x <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
y <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}, check = FALSE, memory = TRUE, iterations = 1
)
## benchmark simulation of bulk samples
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLSChung.zinb.new.1.rds"))
DDLS.Chung.1 <- simSingleCellProfiles(object = DDLS.Chung.1,
cell.ID.column = "Cell_ID",
cell.type.column = "Cell_type",
n.cells = 100,
verbose = TRUE)
probMatrix <- read.delim(file.path(pathWD, "probPriors.def.tsv"))
exclusive.types <- c("ER+", "HER2+", "ER+ and HER2+", "TNBC")
DDLS.Chung.prob.new.2.prueba <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
prob.design = probMatrix,
verbose = TRUE
)
benchmark <- bench::mark(
onDisk = {
x <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
y <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}, check = FALSE, memory = TRUE, iterations = 1
)
benchmark <- bench::mark(
onDisk = {
x <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.benchmark.h5")
)
}, inMemory = {
y <- generateBulkSamples(
DDLS.Chung.prob.new.2.prueba,
threads = 1,
type.data = "both"
)
}, check = FALSE, memory = TRUE, iterations = 0
)
benchmark
benchmark$time
benchmark[, "time"]
benchmark[, "memory"]
benchmark[, "memory"]$memory
assays(y@bulk.sim$train)
assay(y@bulk.sim$train)
## Ejecución del paquete con los datos reales
sizeReadable <- function(object) format(object.size(object), units = "auto", standard = "SI")
sizeReadable(assay(y@bulk.sim$train))
sizeReadable(assay(y@bulk.sim$test))
sizeReadable(assay(x@bulk.sim$test))
sizeReadable(assay(x@bulk.sim$train))
dim(assay(y@bulk.sim$train))
dim(assay(y@bulk.sim$test))
