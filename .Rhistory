theme = theme_linedraw()
)
corrExpPredPlot(
DDLS.Chung.1.prob.2.bulk.final,
facet.by = "CellType",
color.by = "CellType",
theme = theme_bw()
)
corrExpPredPlot(
DDLS.Chung.1.prob.2.bulk.final,
facet.by = "nMix",
color.by = "CellType",
theme = theme_bw()
)
corrExpPredPlot(
DDLS.Chung.1.prob.2.bulk.final,
facet.by = NULL,
color.by = "CellType",
theme = theme_linedraw()
)
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "CellType",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "CellType",
color.by = "CellType",
log.2 = FALSE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "CellType",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
# blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
#                    facet.by = "CellType",
#                    color.by = "CellType",
#                    log.2 = FALSE,
#                    filter.sc = TRUE,
#                    density = TRUE,
#                    theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "nMix",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "nMix",
color.by = "CellType",
log.2 = FALSE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
barErrorPlot(DDLS.Chung.1.prob.1.random.combined,
error = "MSE",
by = "CellType",
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.1.random.combined,
error = "MAE",
by = "CellType",
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.1.random.combined,
error = "MSE",
by = "nMix",
angle = 0,
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.1.random.combined,
error = "MAE",
by = "nMix",
angle = 0,
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.2.bulk.final,
error = "MSE",
by = "CellType",
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.2.bulk.final,
error = "MAE",
by = "CellType",
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.2.bulk.final,
error = "MSE",
by = "nMix",
angle = 0,
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.2.bulk.final,
error = "MAE",
by = "nMix",
angle = 0,
theme = theme_linedraw())
amd <- trained.model(DDLS.Chung.1.prob.1.random.combined)@eval.stats.samples$raw
yardstick::ccc(data = amd, truth = Prob, estimate = Pred)
if (file.exists(file.path(pathWD, "DDLS.Chung.1.prob.1.bulk.final.rds"))) {
DDLS.Chung.1.prob.1.bulk.final <- readRDS(
file.path(pathWD, "DDLS.Chung.1.prob.1.bulk.final.rds")
)
}
data.test.exc.cells <- DDLS.Chung.1.prob.1.bulk.final@final.data$test
count.exc <- as.matrix(assay(data.test.exc.cells))
colnames(count.exc) <- colData(data.test.exc.cells)[[1]]
sce.exc.cells <- SummarizedExperiment(assay = list(counts = t(count.exc)))
prob.target <- data.test.exc.cells@metadata$prob.matrix
tensorflow::tf$compat$v1$disable_eager_execution()
DDLS.Chung.1.prob.1.random.combined <- loadDeconvDataFromSummarizedExperiment(
object = DDLS.Chung.1.prob.1.random.combined,
se.object = sce.exc.cells,
name.data = "exclusive.cells"
)
DDLS.Chung.1.prob.1.random.combined <- deconvDigitalDLSorterObj(
object = DDLS.Chung.1.prob.1.random.combined,
name.data = "exclusive.cells",
batch.size = 128,
normalize = FALSE, ## ya están normalizados
verbose = TRUE
)
pred <- DDLS.Chung.1.prob.1.random.combined@deconv.results
rownames(pred$exclusive.cells) <- rownames(prob.target)
DDLS.Chung.1.prob.1.random.combined@trained.model@predict.results <- pred$exclusive.cells
final.data(DDLS.Chung.1.prob.1.random.combined, "test")@metadata[[1]] <- prob.target
DDLS.Chung.1.prob.1.random.combined <- calculateEvalMetrics(DDLS.Chung.1.prob.1.random.combined)
lapply(list("AbsErr", "ppAbsErr", "SqrErr", "ppSqrErr"), function(x) {
plotDistError(
DDLS.Chung.1.prob.1.random.combined,
error = x,
facet.by = "nMix",
color.by = "nMix",
ncol = 5,
type = "violinplot",
theme = theme_bw(),
filter.sc = TRUE,
)
})
lapply(list("AbsErr", "ppAbsErr", "SqrErr", "ppSqrErr"), function(x) {
plotDistError(
DDLS.Chung.1.prob.1.random.combined,
error = x,
facet.by = "nMix",
color.by = "nMix",
ncol = 5,
type = "boxplot",
theme = theme_bw(),
filter.sc = TRUE
)
})
if (file.exists(file.path(pathWD, "DDLS.Chung.1.prob.1.bulk.final.rds"))) {
DDLS.Chung.1.prob.1.bulk.final <- readRDS(
file.path(pathWD, "DDLS.Chung.1.prob.1.bulk.final.rds")
)
}
data.test.exc.cells <- DDLS.Chung.1.prob.1.bulk.final@final.data$test
count.exc <- as.matrix(assay(data.test.exc.cells))
colnames(count.exc) <- colData(data.test.exc.cells)[[1]]
sce.exc.cells <- SummarizedExperiment(assay = list(counts = t(count.exc)))
prob.target <- data.test.exc.cells@metadata$prob.matrix
tensorflow::tf$compat$v1$disable_eager_execution()
DDLS.Chung.1.prob.2.bulk.final <- loadDeconvDataFromSummarizedExperiment(
object = DDLS.Chung.1.prob.2.bulk.final,
se.object = sce.exc.cells,
name.data = "exclusive.cells"
)
DDLS.Chung.1.prob.2.bulk.final <- deconvDigitalDLSorterObj(
object = DDLS.Chung.1.prob.2.bulk.final,
name.data = "exclusive.cells",
batch.size = 128,
normalize = FALSE, ## ya están normalizados
verbose = TRUE
)
pred <- DDLS.Chung.1.prob.2.bulk.final@deconv.results
rownames(pred$exclusive.cells) <- rownames(prob.target)
DDLS.Chung.1.prob.2.bulk.final@trained.model@predict.results <- pred$exclusive.cells
final.data(DDLS.Chung.1.prob.2.bulk.final, "test")@metadata[[1]] <- prob.target
DDLS.Chung.1.prob.2.bulk.final <- calculateEvalMetrics(DDLS.Chung.1.prob.2.bulk.final)
lapply(list("AbsErr", "ppAbsErr", "SqrErr", "ppSqrErr"), function(x) {
plotDistError(
DDLS.Chung.1.prob.2.bulk.final,
error = x,
facet.by = "nMix",
color.by = "nMix",
ncol = 5,
type = "violinplot",
theme = theme_bw(),
filter.sc = TRUE,
)
})
lapply(list("AbsErr", "ppAbsErr", "SqrErr", "ppSqrErr"), function(x) {
plotDistError(
DDLS.Chung.1.prob.2.bulk.final,
error = x,
facet.by = "nMix",
color.by = "nMix",
ncol = 5,
type = "boxplot",
theme = theme_bw(),
filter.sc = TRUE
)
})
lapply(list("AbsErr", "ppAbsErr", "SqrErr", "ppSqrErr"), function(x) {
plotDistError(
DDLS.Chung.1.prob.2.bulk.final,
error = x,
facet.by = "CellType",
color.by = "nMix",
theme = theme_bw()
)
})
lapply(list("AbsErr", "ppAbsErr", "SqrErr", "ppSqrErr"), function(x) {
plotDistError(
DDLS.Chung.1.prob.2.bulk.final,
error = x,
facet.by = "CellType",
color.by = "nMix",
theme = theme_bw(),
type = "boxplot"
)
})
plotDistError(
DDLS.Chung.1.prob.2.bulk.final,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType"
)
plotDistError(
DDLS.Chung.1.prob.2.bulk.final,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType"
)
plotDistError(
DDLS.Chung.1.prob.2.bulk.final,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType"
)
plotDistError(
DDLS.Chung.1.prob.2.bulk.final,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType"
)
corrExpPredPlot(
DDLS.Chung.1.prob.2.bulk.final,
facet.by = "CellType",
color.by = "CellType",
theme = theme_bw()
)
corrExpPredPlot(
DDLS.Chung.1.prob.2.bulk.final,
facet.by = "nMix",
color.by = "CellType",
theme = theme_bw()
)
corrExpPredPlot(
DDLS.Chung.1.prob.2.bulk.final,
facet.by = NULL,
color.by = "CellType",
theme = theme_linedraw()
)
blandAltmanLehPlot(DDLS.Chung.1.prob.2.bulk.final,
facet.by = "CellType",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.2.bulk.final,
facet.by = "CellType",
color.by = "CellType",
log.2 = FALSE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.2.bulk.final,
facet.by = "nMix",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.2.bulk.final,
facet.by = "nMix",
color.by = "CellType",
log.2 = FALSE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
barErrorPlot(DDLS.Chung.1.prob.2.bulk.final,
error = "MSE",
by = "CellType",
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.2.bulk.final,
error = "MAE",
by = "CellType",
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.2.bulk.final,
error = "MSE",
by = "nMix",
angle = 0,
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.2.bulk.final,
error = "MAE",
by = "nMix",
angle = 0,
theme = theme_linedraw())
amd <- trained.model(DDLS.Chung.1.prob.2.bulk.final)@eval.stats.samples$raw
yardstick::ccc(data = amd, truth = Prob, estimate = Pred)
lapply(list("AbsErr", "ppAbsErr", "SqrErr", "ppSqrErr"), function(x) {
plotDistError(
DDLS.Chung.1.prob.1.random.combined,
error = x,
facet.by = "CellType",
color.by = "nMix",
theme = theme_bw()
)
})
lapply(list("AbsErr", "ppAbsErr", "SqrErr", "ppSqrErr"), function(x) {
plotDistError(
DDLS.Chung.1.prob.1.random.combined,
error = x,
facet.by = "CellType",
color.by = "nMix",
theme = theme_bw(),
type = "boxplot"
)
})
plotDistError(
DDLS.Chung.1.prob.1.random.combined,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType"
)
plotDistError(
DDLS.Chung.1.prob.1.random.combined,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType"
)
plotDistError(
DDLS.Chung.1.prob.1.random.combined,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType"
)
plotDistError(
DDLS.Chung.1.prob.1.random.combined,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType"
)
corrExpPredPlot(
DDLS.Chung.1.prob.1.random.combined,
facet.by = "CellType",
color.by = "CellType",
theme = theme_bw()
)
corrExpPredPlot(
DDLS.Chung.1.prob.1.random.combined,
facet.by = "nMix",
color.by = "CellType",
theme = theme_bw()
)
corrExpPredPlot(
DDLS.Chung.1.prob.1.random.combined,
facet.by = NULL,
color.by = "CellType",
theme = theme_linedraw()
)
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "CellType",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "CellType",
color.by = "CellType",
log.2 = FALSE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "nMix",
color.by = "CellType",
log.2 = TRUE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
blandAltmanLehPlot(DDLS.Chung.1.prob.1.random.combined,
facet.by = "nMix",
color.by = "CellType",
log.2 = FALSE,
filter.sc = TRUE,
density = TRUE,
theme = theme_bw())
barErrorPlot(DDLS.Chung.1.prob.1.random.combined,
error = "MSE",
by = "CellType",
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.1.random.combined,
error = "MAE",
by = "CellType",
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.1.random.combined,
error = "MSE",
by = "nMix",
angle = 0,
theme = theme_linedraw())
barErrorPlot(DDLS.Chung.1.prob.1.random.combined,
error = "MAE",
by = "nMix",
angle = 0,
theme = theme_linedraw())
amd <- trained.model(DDLS.Chung.1.prob.1.random.combined)@eval.stats.samples$raw
yardstick::ccc(data = amd, truth = Prob, estimate = Pred)
sum(c(1000, 3000, 500, 1000, 3000, 2000))
sum(c(150, 250, 150, 200, 9500, 250))
c(700, 2000, 300, 700, 2000, 1400)
sum(c(700, 2000, 300, 700, 2000, 1400))
sum(c(700, 2000, 300, 700, 4000, 1400))
sum(c(700, 2000, 300, 700, 4000, 1000))
sum(c(150, 2000, 300, 700, 4000, 1000))
sum(c(150, 2000, 100, 700, 4000, 1000))
sum(c(150, 2000, 100, 150, 4000, 1000))
sum(c(150, 1500, 100, 150, 4000, 1000))
sum(c(150, 1200, 100, 150, 4000, 1000))
sum(c(150, 1700, 100, 150, 4000, 1000))
devtools::load_all(".")
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
if (file.exists(file.path(pathWD, "DDLSChung.zinb.new.1.rds"))) {
DDLS.Chung.1 <- readRDS(file.path(pathWD, "DDLSChung.zinb.new.1.rds"))
} else {
DDLS.Chung.1 <- estimateZinbwaveParams(
object = DDLS.Chung,
cell.ID.column = "Cell_ID",
gene.ID.column = "external_gene_name",
cell.type.column = "Cell_type",
cell.cov.columns = c("Patient", "Sample_type"),
gene.cov.columns = "gene_length",
threads = 4,
verbose = TRUE
)
saveRDS(DDLS.Chung.1, file = file.path(pathWD, "DDLSChung.zinb.new.1.rds"))
}
DDLS.Chung.1 <- simSingleCellProfiles(object = DDLS.Chung.1,
cell.ID.column = "Cell_ID",
cell.type.column = "Cell_type",
n.cells = 100,
verbose = TRUE)
devtools::load_all(".")
devtools::load_all(".")
probMatrix <- read.delim(file.path(pathWD, "probPriors.def.tsv"))
exclusive.types <- c("ER+", "HER2+", "ER+ and HER2+", "TNBC")
DDLS.Chung.prob.new <- generateTrainAndTestBulkProbMatrixNew(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
prob.design = probMatrix,
verbose = TRUE
)
DDLS.Chung.prob.new <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
prob.design = probMatrix,
verbose = TRUE
)
DDLS.Chung.prob.new <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = TRUE,
prob.design = probMatrix,
verbose = TRUE
)
DDLS.Chung.prob.new <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.1,
cell.type.column = "Cell_type",
exclusive.types = exclusive.types,
prob.design = probMatrix,
verbose = TRUE
)
DDLS.Chung.prob.new <- generateBulkSamples(
DDLS.Chung.prob.new,
threads = 2,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.prob.new.h5")
)
