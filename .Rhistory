override.aes = list(size = 2.5),
title.position = "top", ncol = 2),
shape = guide_legend(title = "Simuladas",
override.aes = list(size = 2.5),
title.position = "top", ncol = 2)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# ggplot(data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings),
#        aes(x = tSNE_1, y = tSNE_2, color = cellsMetadata.sim1$Cell_type,
#            shape = shape.cells)) +
#   geom_point(size = 3) + scale_color_manual(values = color.list) +
#   scale_shape_manual(values = c(19, 1)) + ggtitle("Simulation 1") +
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), legend.key=element_blank(),
#         axis.line = element_line(colour = "black"), legend.title = element_blank(),
#         text = element_text(size=15), plot.title = element_text(size = 16, face = "bold"))
# data <- data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings)
shape.cells <- factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas"))
matches <- match(sce.final$Cell_ID, tSneDf$CellNames)
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas")),
Cell_type = sce.final$Cell_type[matches]
)
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 1.5, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("tSNE de la simulación de células (modelo específico") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 2),
shape = guide_legend(title = "Simuladas",
override.aes = list(size = 2.5),
title.position = "top", ncol = 2)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# ggplot(data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings),
#        aes(x = tSNE_1, y = tSNE_2, color = cellsMetadata.sim1$Cell_type,
#            shape = shape.cells)) +
#   geom_point(size = 3) + scale_color_manual(values = color.list) +
#   scale_shape_manual(values = c(19, 1)) + ggtitle("Simulation 1") +
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), legend.key=element_blank(),
#         axis.line = element_line(colour = "black"), legend.title = element_blank(),
#         text = element_text(size=15), plot.title = element_text(size = 16, face = "bold"))
# data <- data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings)
shape.cells <- factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas"))
matches <- match(sce.final$Cell_ID, tSneDf$CellNames)
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas")),
Cell_type = sce.final$Cell_type[matches]
)
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 1.5, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("tSNE de la simulación de células (modelo específico") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1),
shape = guide_legend(title = "Simuladas",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# ggplot(data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings),
#        aes(x = tSNE_1, y = tSNE_2, color = cellsMetadata.sim1$Cell_type,
#            shape = shape.cells)) +
#   geom_point(size = 3) + scale_color_manual(values = color.list) +
#   scale_shape_manual(values = c(19, 1)) + ggtitle("Simulation 1") +
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), legend.key=element_blank(),
#         axis.line = element_line(colour = "black"), legend.title = element_blank(),
#         text = element_text(size=15), plot.title = element_text(size = 16, face = "bold"))
# data <- data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings)
shape.cells <- factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas"))
matches <- match(sce.final$Cell_ID, tSneDf$CellNames)
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas")),
Cell_type = sce.final$Cell_type[matches]
)
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("tSNE de la simulación de células (modelo específico") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1),
shape = guide_legend(title = "Simuladas",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# ggplot(data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings),
#        aes(x = tSNE_1, y = tSNE_2, color = cellsMetadata.sim1$Cell_type,
#            shape = shape.cells)) +
#   geom_point(size = 3) + scale_color_manual(values = color.list) +
#   scale_shape_manual(values = c(19, 1)) + ggtitle("Simulation 1") +
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), legend.key=element_blank(),
#         axis.line = element_line(colour = "black"), legend.title = element_blank(),
#         text = element_text(size=15), plot.title = element_text(size = 16, face = "bold"))
# data <- data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings)
shape.cells <- factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas"))
matches <- match(sce.final$Cell_ID, tSneDf$CellNames)
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas")),
Cell_type = sce.final$Cell_type[matches]
)
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("tSNE de la simulación de células (modelo específico)") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1),
shape = guide_legend(title = "Simuladas",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# ggplot(data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings),
#        aes(x = tSNE_1, y = tSNE_2, color = cellsMetadata.sim1$Cell_type,
#            shape = shape.cells)) +
#   geom_point(size = 3) + scale_color_manual(values = color.list) +
#   scale_shape_manual(values = c(19, 1)) + ggtitle("Simulation 1") +
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), legend.key=element_blank(),
#         axis.line = element_line(colour = "black"), legend.title = element_blank(),
#         text = element_text(size=15), plot.title = element_text(size = 16, face = "bold"))
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled@reductions$umap@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled@reductions$umap@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Real cells", "Simulated cells")),
Cell_type = sce.final$Cell_type[matches]
)
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("Integración") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 2)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 12),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
if (file.exists(file.path(pathWD, "DDLSChung.zinb.def.2.rds"))) {
DDLS.Chung.2 <- readRDS(file.path(pathWD, "DDLSChung.zinb.def.2.rds"))
} else {
DDLS.Chung.2 <- estimateZinbwaveParams(
object = DDLS.Chung,
cell.ID.column = "Cell_ID",
gene.ID.column = "external_gene_name",
cell.type.column = "Cell_type",
cell.cov.columns = "Patient",
gene.cov.columns = "gene_length",
threads = 2,
verbose = TRUE
)
saveRDS(DDLS.Chung.2, file = file.path(pathWD, "DDLSChung.zinb.def.2.rds"))
}
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLS.Chung <- loadRealSCProfiles(
single.cell.real = file.path(pathWD, filesChung),
cell.ID.column = "Cell_ID",
gene.ID.column = "external_gene_name",
min.cells = 1,
min.counts = 1,
project = "Chung_etal_2017"
)
DDLS.Chung.2 <- estimateZinbwaveParams(
object = DDLS.Chung,
cell.ID.column = "Cell_ID",
gene.ID.column = "external_gene_name",
cell.type.column = "Cell_type",
cell.cov.columns = "Patient",
gene.cov.columns = "gene_length",
threads = 2,
verbose = TRUE
)
saveRDS(DDLS.Chung.2, file = file.path(pathWD, "DDLSChung.zinb.def.2.rds"))
pathWD
saveRDS(df.final, file.path(pathWD, "tsne.model.fine.scaled.rds"))
# data <- data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings)
shape.cells <- factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas"))
matches <- match(sce.final$Cell_ID, tSneDf$CellNames)
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Reales", "Simuladas")),
Cell_type = sce.final$Cell_type[matches]
)
saveRDS(df.final, file.path(pathWD, "tsne.model.fine.scaled.rds"))
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("tSNE de la simulación de células (modelo específico)") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1),
shape = guide_legend(title = "Simuladas",
override.aes = list(size = 2.5),
title.position = "top", ncol = 1)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 13),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
# ggplot(data.frame(sim.seuratSC.Scaled@reductions$tSNE.Final@cell.embeddings),
#        aes(x = tSNE_1, y = tSNE_2, color = cellsMetadata.sim1$Cell_type,
#            shape = shape.cells)) +
#   geom_point(size = 3) + scale_color_manual(values = color.list) +
#   scale_shape_manual(values = c(19, 1)) + ggtitle("Simulation 1") +
#   theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
#         panel.background = element_blank(), legend.key=element_blank(),
#         axis.line = element_line(colour = "black"), legend.title = element_blank(),
#         text = element_text(size=15), plot.title = element_text(size = 16, face = "bold"))
df.final <- data.frame(
tSNE_1 = sim.seuratSC.Scaled@reductions$umap@cell.embeddings[, 1],
tSNE_2 = sim.seuratSC.Scaled@reductions$umap@cell.embeddings[, 2],
simul = factor(colData(sce.final)$Simulated, labels = c("Real cells", "Simulated cells")),
Cell_type = sce.final$Cell_type[matches]
)
saveRDS(df.final, file.path(pathWD, "umap.model.fine.scaled.rds"))
ggplot(df.final, aes(x = tSNE_1, y = tSNE_2, color = Cell_type,
shape = simul)) + theme_classic() +
geom_point(size = 2, alpha = 0.8) +
scale_color_manual(values = color.list.2) +
scale_shape_manual(values = c(19, 1)) +
ggtitle("Integración") +
xlab("tSNE 1") + ylab(paste0("tSNE 2")) +
guides(color = guide_legend(title = "Tipo celular",
override.aes = list(size = 2.5),
title.position = "top", ncol = 2)) +
theme(plot.title = element_text(face = "bold", hjust = 0.5, size = 12),
legend.title = element_text(face = "bold"),
legend.title.align = 0.5)
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLS.Chung.2 <- readRDS(file.path(pathWD, "DDLSChung.zinb.def.2.rds"))
DDLS.Chung.2 <- simSingleCellProfiles(
object = DDLS.Chung.2,
cell.ID.column = "Cell_ID",
cell.type.column = "Cell_type",
n.cells = 1000,
verbose = TRUE
)
saveRDS(DDLS.Chung.2, file.path(pathWD, "DDLS.Chung.1.2.SC.Final.rds"))
exclusive.types <- c("ER+", "HER2+", "ER+/HER2+", "TNBC")
probMatrix <- data.frame(
Cell_type = c(
"ER+", "HER2+", "ER+/HER2+", "TNBC",
"Stromal", "Monocyte", "TCD4mem", "BGC",
"Bmem", "DC", "Macrophage", "TCD8", "TCD4reg"
),
from = c(rep(30, 4), 1, rep(0, 8)),
to = c(rep(70, 4), 50, rep(15, 8))
)
DDLS.Chung.2 <- generateTrainAndTestBulkProbMatrix(
object = DDLS.Chung.2,
cell.type.column = "Cell_type",
prob.design = probMatrix,
exclusive.types = exclusive.types,
num.bulk.samples = 31000,
verbose = TRUE
)
DDLS.Chung.2 <- generateBulkSamples(
DDLS.Chung.2,
threads = 2,
type.data = "both",
file.backend = file.path(pathWD, "DDLS.Chung.1.2.def.bulk.h5")
)
saveRDS(DDLS.Chung.2, file.path(pathWD, "DDLS.Chung.1.2.def.bulk.rds"))
DDLS.Chung.2 <- prepareDataForTraining(
object = DDLS.Chung.2,
type.data = "both",
combine = "bulk",
file.backend = file.path(pathWD, "DDLS.Chung.1.2.def.prepared.onlyBulk.h5"),
verbose = TRUE
)
devtools::load_all(".")
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
DDLS.Chung.2 <- readRDS(file.path(pathWD, "DDLS.Chung.1.2.def.bulk.rds"))
DDLS.Chung.2
DDLS.Chung.2 <- prepareDataForTraining(
object = DDLS.Chung.2,
type.data = "both",
combine = "bulk",
file.backend = file.path(pathWD, "DDLS.Chung.1.2.def.prepared.onlyBulk.h5"),
verbose = TRUE
)
saveRDS(DDLS.Chung.2, file.path(pathWD, "DDLS.Chung.1.2.def.prepared.onlyBulk.rds"))
## Entrenamiento red neuronal
tensorflow::tf$compat$v1$disable_eager_execution()
DDLS.Chung.2 <- trainDigitalDLSorterModel(
object = DDLS.Chung.2,
batch.size = 128,
num.epochs = 25
)
saveRDS(DDLS.Chung.2,
file.path(pathWD, "DDLS.Chung.1.2.def.DNN.onlyBulk.rds"))
saveTrainedModelAsH5(DDLS.Chung.2,
file.path = file.path(pathWD, "DDLS.Chung.1.2.def.DNN.onlyBulk.rds"))
saveTrainedModelAsH5(DDLS.Chung.2,
file.path = file.path(pathWD, "DDLS.Chung.1.2.def.DNN.onlyBulk.h5"))
DDLS.Chung.2 <- calculateEvalMetrics(DDLS.Chung.2)
plotDistError(
DDLS.Chung.2,
error = "AbsErr",
facet.by = "nMix",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 0.29,
theme = theme_bw(),
ylimit = 0.32
)
plotDistError(
DDLS.Chung.2,
error = "ppAbsErr",
facet.by = "nMix",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 1.1,
theme = theme_bw(),
ylimit = 1
)
plotDistError(
DDLS.Chung.2,
error = "AbsErr",
facet.by = "CellType",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 0.29,
theme = theme_bw(),
ylimit = 0.32
)
plotDistError(
DDLS.Chung.2,
error = "ppAbsErr",
facet.by = "CellType",
color.by = "nMix",
error.labels = TRUE,
pos.x.label = 5,
pos.y.label = 1.1,
theme = theme_bw(),
ylimit = 1
)
plotDistError(
DDLS.Chung.2,
error = "AbsErr",
x.by = "nMix",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType",
error.labels = TRUE,
pos.y.label = 0.2
)
plotDistError(
DDLS.Chung.2,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
filter.sc = TRUE,
color.by = "CellType",
pos.y.label = 0.2
)
plotDistError(
DDLS.Chung.2,
error = "AbsErr",
x.by = "CellType",
facet.by = NULL,
type = "boxplot",
filter.sc = TRUE,
color.by = "CellType",
pos.y.label = 0.2
)
knitr::opts_chunk$set(echo = TRUE)
pathWD <- "/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017/digitalDLSorter.Chung/data"
filesChung <- c("countsMatrix.def.tsv.gz",
"cellsMetadata.def.2.tsv.gz",
"genesMetadata.def.tsv.gz")
projectPath <- file.path("/data3/ctorroja/Project_deconGRN/PublicData/Chung_etal_2017")
# projectPath <- file.path("/home/dmananesc/Documents/scRNAseq/PublicData/Chung_etal_2017")
# projectPath <- file.path("/home/diego/Documentos/proyectos_master/tfm_projects/PublicData/Chung_etal_2017")
outputDir <- "SecondTest"
prefix <- "SecondTest"
# Single Cell paths
analysisDirSC <- "SC.Analysis"
analysisPathSC <- file.path(projectPath, analysisDirSC)
outputPathSC <- file.path(analysisPathSC, outputDir)
# Bulk RNAseq
analysisDir <- "SC.Analysis.simulated"
analysisPath <- file.path(projectPath, analysisDir)
outputPath <- file.path(analysisPath, outputDir)
# dir.create(outputPath, recursive = T)
dir.create(file.path(outputPath, "Plots"), showWarnings = F)
setwd(analysisPath)
## Allow interoperability between Python and R
# library(reticulate)
# reticulate::use_condaenv(condaenv = "dropEst", conda = "/home/ctorroja/miniconda3.v4.5.11/bin/conda", required = T)
# py_available(initialize = T)
# py_config()
# knitr::knit_engines$set(python = eng_python)
## Settings to knitr
knitr::opts_chunk$set(
echo = FALSE,
fig.align = "center",
fig.path = file.path(outputPath, "Plots/"),
fig.pos = "H",
message = FALSE,
warning = FALSE,
comment = NA,
dev = c("jpeg", "postscript"),
dpi = 300
)
library(Seurat)
library(scater)
library(scran)
library(dplyr)
library(reshape2)
library(DT)
library(kableExtra)
library(gtools)
library(Matrix)
library(Matrix.utils)
library(RColorBrewer)
library(gplots)
library(ComplexHeatmap)
library(circlize)
library(gridExtra)
library(ggrepel)
library(ggridges)
library(GGally)
library(ggtern)
library(cowplot)
library(multcomp)
library(lme4)
library(biomaRt)
# library(scMCA) # definition of cell-types based on single-cell data expression
library(enrichR)
# library(dropestr)
options(stringsAsFactors = FALSE)
options(encoding = 'UTF-8')
# URL data: https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE110686
# source("/home/diego/Documentos/proyectos_master/tfm_projects/scAnalysis_tfm/helperFunctions.R")
source("/home/dmananesc/Documents/scRNAseq/scAnalysis_tfm/helperFunctions.R")
## Set a colors for plots
to <- color.list[22]
ss <- color.list[18]
color.list[22] <- ss
color.list[18] <- to
color.list.2 <- c(RColorBrewer::brewer.pal(12, "Paired"), "#d45b91", "#374738",
RColorBrewer::brewer.pal(12, "Set3"),
RColorBrewer::brewer.pal(8, "Pastel2"),
"#333333", "#5D5D5D",
"#888888", "#B3B3B3")
color.list.2[11] <- "#e3dc5b"
color.list.2[15] <- "#60c4b4"
DDLS.Chung.ex <- readRDS(file.path(pathWD, "DDLS.Chung.ex.SC.Final.rds"))
devtools::load_all(".")
