% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simBulk.R
\name{generateTrainAndTestBulkProbMatrix}
\alias{generateTrainAndTestBulkProbMatrix}
\title{Generate training and test bulk probability matrices.}
\usage{
generateTrainAndTestBulkProbMatrix(
  object,
  cell.type.column,
  prob.design,
  train.freq = 2/3,
  num.bulk.samples = NULL,
  exclusive.types = NULL,
  verbose = TRUE
)
}
\arguments{
\item{object}{\code{DigitalDLSorter} object with \code{single.cell.real} and
\code{zinb.params} slots.}

\item{cell.type.column}{Name or number of the column in cells.metadata
corresponding with the cell type of each cell.}

\item{prob.design}{\code{data.frame} with the frequency ranges expected for each
cell type present in the experiment. This information can be estimated from
literature or from the single cell experiment itself. This \code{data.frame} must be
built by three columns with specific headers:
\itemize{
\item A cell type column with the same name of the cell type column
in cells.metadata. If the name of the column is not the same, function
returns an error. Cell types must appear on cells.metadata.
\item A second column named 'from' with the start frequency for each cell
type.
\item A third column named 'to' with the final frecuency for each cell type.}}

\item{train.freq}{Proportion of cells used for training set (2/3 by default).}

\item{num.bulk.samples}{Integer which allows to establish the number of bulk
samples that will be generated taking into account training and test data.
If it is NULL (by default), approximately
18 more samples will be formed than there are cells in \code{single.cell.sim} slot.
If an integer is given, the number of bulk samples will be the same.}

\item{exclusive.types}{Vector of cell types which allows to establish cell types that
biologically do not make sense to be mixed during the generation of bulk samples.
If it is equal to NULL (by default), all cell types will be mixed when generating
bulk samples.}

\item{verbose}{Show messages during the execution.}
}
\value{
A DigitalDLSorter object with \code{prob.matrix} slot containing
a \code{\link{ProbMatrixCellTypes}} object. For more information about the
structure of this class, see \code{\link{?ProbMatrixCellTypes}}. The most
important element is the probability matrix, which is formed by \eqn{n} rows
(being \eqn{n} the number of bulk samples that will be generated) and \eqn{k}
columns (being \eqn{k} the number of cell types present in the experiment).
}
\description{
Generate training and test bulk probability matrices for the simulation of bulk
samples using the single-cell expression profiles. The resulting matrix will
determine the proportion of the different cell types that will form the
simulated bulk samples.
}
\details{
First of all, simulated single-cell profiles are split into training and test
(2/3-1/3 by default). Then, to avoid biases due to the composition of
bulk samples, proportions for the mixtures of cell types (\eqn{w_1,...,w_k},
where \eqn{k} is the number of cell types available in single-cell profiles)
that will form bulk samples are randomly generated using three different
approaches (see Torroja and Sanchez-Cabo, 2019 for more details). If you want
to know the probabilities generated by the different methods during the process,
you can access them with \code{\link{showProbPlot}} function.

It is important to note that the number of bulk-samples simulated are determined
by the number of single-cell profiles available: approximately 18 more samples
will be formed than there are cells in \code{single.cell.sim} slot. If you want
a predefined number of bulk samples, see \code{num.bulk.samples} argument. This is
usefull in the case that you want to control the number of samples generated, but
we recommend default values.

If your experiment contains cell types which can not be mixed in the same bulk
samples, you can determine this cell types with \code{exclusive.types} argument.
}
\examples{
## generate a data.frame with frequency ranges of each cell type
probMatrix <- data.frame(
  Cell_types = c("ER+", "HER2+", "Stromal", "Monocyte", "Tme",
                 "BGC", "ER+ and HER2+", "Bmem", "TNBC", "DC",
                 "Macrophage", "TCD8", "Treg"),
  from = c(30, 30, 1, 0, 0, 0, 30, 0, 30, 0, 0, 0, 0),
  to = c(70, 70, 50, 15, 15, 15, 70, 15, 70, 15, 15, 15, 15)
)

## Without a predefined number of bulk samples
DDLSChung <- generateTrainAndTestBulkProbMatrix(
  object = DDLSChung,
  cell.type.column = "Cell_type",
  prob.design = probMatrix,
  verbose = TRUE
)

## With a predefined number of bulk samples
DDLSChung <- generateTrainAndTestBulkProbMatrix(
  object = DDLSChung,
  cell.type.column = "Cell_type",
  prob.design = probMatrix,
  num.bulk.samples = 10500,
  verbose = TRUE
)

## Set exclusive cell.types
exclusive.types <- c("ER+", "HER2+", "ER+ and HER2+", "TNBC")
DDLSChung <- generateTrainAndTestBulkProbMatrix(
  object = DDLSChung,
  cell.type.column = "Cell_type",
  prob.design = probMatrix,
  exclusive.types = exclusive.types
  verbose = TRUE
)

}
\references{
Torroja, C. y SÃ¡nchez-Cabo, F. (2019). digitalDLSorter: A Deep Learning algorithm to quantify
immune cell populations based on scRNA-Seq data. Frontiers in Genetics 10, 978. doi:
\url{10.3389/fgene.2019.00978}
}
\seealso{
\code{\link{generateBulkSamples}}, \code{\link{ProbMatrixCellType}}.
}
