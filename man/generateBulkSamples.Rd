% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simBulk.R
\name{generateBulkSamples}
\alias{generateBulkSamples}
\title{Generate training and test simulated bulk samples.}
\usage{
generateBulkSamples(
  object,
  type.data = "both",
  file.backend = NULL,
  threads = 2,
  verbose = TRUE
)
}
\arguments{
\item{object}{\code{DigitalDLSorter} object with \code{single.cell.sim} and
\code{prob.cell.types} slots.}

\item{type.data}{Type of data to generate among 'train', 'test' or 'both'
(the last by default).}

\item{file.backend}{Valid file path where to save the HDF5 file used as backend.
If it is equal to \code{NULL} (by default), the data are produced and loaded in memory.}

\item{threads}{Number of threads used during the generation of bulk samples
(2 by default).}

\item{verbose}{Show messages during the execution.}
}
\value{
A DigitalDLSorter object with \code{bulk.sim} slot containing
a list with one or two entries (depending on selected \code{type.data} argument):
'train' and 'test'. Each entry contains a \code{SummarizedExperiment} object
with simulated bulk samples in \code{assay} slot, sample names in
\code{colData} slot and feature names in \code{rowData} slot.
}
\description{
Generate training and test bulk samples using the probability matrices
built by \code{generateTrainAndTestBulkProbMatrix} function.
These samples are generated using the assumption that the expression of gene \eqn{i}
from sample \eqn{j} is
given by the sum of the cell type specific expression \eqn{X_{ijk}}
weighted by the proportions of cell type \eqn{k} in the sample determined by
the probability matrix.
}
\details{
As described in Description section, bulk samples are built by the sum of
the gene expression of a determined cell type weighted by the proportions
of cell type determined by the probability matrix following the following equation:

\deqn{e_{gk} = \Sum^{w_i}_{i = 1} e_{gi} 1}

The number of bulk samples is determined by dimensions of probability matrix.
See \code{\link{generateTrainAndTestBulkProbMatrix}} for details.

\code{digitalDLSorteR} allows the use of HDF5 files as backend for the resulting data
using \code{DelayedArray} and \code{HDF5Array} frameworks in cases of generating
too large expression matrix to work with it loaded in memory. You need to provide
a valid file path to store the resulting file with '.h5' extension. The data
will be accessible from R without being loaded into memory. This option
slightly slows down execution times, since subsequent transformations of data
will be carried out by chunks instead of using all data. We recommend this
options due to the large size of the simulated matrices.
}
\examples{
## loading all data in memory
DDLSChung <- generateBulkSamples(
  DDLSChung,
  threads = 2,
  type.data = "both"
)

## using HDF5 as backend
DDLSChung <- generateBulkSamples(
  DDLSChung,
  threads = 2,
  type.data = "both",
  file.backend = "DDLSChung.bulk.sim.h5"
)

}
\references{
Pagès H, Hickey wcfP, Lun A (2020). DelayedArray: A unified framework for
working transparently with on-disk and in-memory array-like datasets.
R package version 0.14.1.

Pagès H (2020). HDF5Array: HDF5 backend for DelayedArray objects. R package
version 1.16.1.
}
\seealso{
\code{\link{generateTrainAndTestBulkProbMatrix}},
\code{\link{ProbMatrixCellType}}.
}
