% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllClasses.R
\docType{class}
\name{DigitalDLSorter-class}
\alias{DigitalDLSorter-class}
\alias{DigitalDLSorter}
\title{The DigitalDLSorter Class.}
\description{
The DigitalDLSorter object is the core of digitalDLSorteR. This object stores
the different intermediate data resulting from running pipeline from
real single-cell data to the trained Deep Neural Network, including the data
on which to carry out the process of devonvolution. In the case that a
pre-trained is used, only slots for model and devoncolution data will be used.
}
\details{
This object uses other classes to store the different type of data produced
during the proccess:
\itemize{
\item \code{SingleCellExperiment} class for single-cell RNASeq data, using sparse
matrix from the \code{Matrix} package (\code{dgCMatrix} class) to store the matrix of
counts.
\item \code{ZinbParams} class with the estimated params for the simulation of single-cell profiles.
\item \code{SummarizedExperiment} class for bulk RNASeq data. In this case, it is possible
to load all data in memory or the use of HDF5 files as a backend by
\code{DelayedArray} and \code{HDF5Array} packages. See \code{\link{generateBulkSamples}} for details.
\item \code{ProbMatrixCellTypes} class for the probability matrices built during the process.
See \code{?ProbMatrixCellTypes} for details.
\item \code{\link{DigitalDLSorterDNN}} class for store the trained Neural Network. This steps
is by \code{keras}, See \code{\link{DigitalDLSorterDNN}} for details.
}
}
\section{Slots}{

\describe{
\item{\code{single.cell.real}}{Real single-cell data stored in a \code{SingleCellExperiment}
object. The counts matrix is stored as a \code{dgCMatrix} object for optimize the
amount of occupied memory.}

\item{\code{zinb.params}}{\code{ZinbParams} object with estimated params for the simulation of
new single-cell expression profiles.}

\item{\code{single.cell.sim}}{Simulated single-cell expression profiles.}

\item{\code{prob.cell.types}}{\code{ProbMatrixCellTypes} class with the probability matrix built
for the simulation of bulk RNASeq profiles. These probabilities determine the
proportion of single-cell types that will constitute te bulk samples.}

\item{\code{bulk.sim}}{This slots consists in a list with two elements: train and test simulated bulk RNASeq.
This data are stored as a \code{SummarizedExperiment} object. We recommend the
use of HDF5 file as a backend due to the large amount of memory they occupy.}

\item{\code{final.data}}{The final data that will be used for the training and testing the
Depp Neural Network. As in the previous slot, it is a list with two items, train
and test. The counts matrices are combine with single-cell profiles (if you want),
scaled and shuffled for the training.}

\item{\code{trained.model}}{\code{\link{DigitalDLSorterDNN}} object with the trained model,
different metrics obtained during the training and evalutation metrics from
the application of the model over test data.}

\item{\code{deconv.data}}{Optional slot where is possible store the bulk samples for
deconvolution. It is a list whose name is the name of the data provided for
deconvolution. It is possible store more than one datset to make predictions.
It is also possible to carry out the prediction process over
files stored in text files. See \code{\link{deconvDigitalDLSorterModel}} for details.}

\item{\code{deconv.results}}{Slot for store the results from the deconvolution process.
It is a list whose name is the name of the data from which they come.}

\item{\code{project}}{Name of the project}

\item{\code{version}}{Version of DigitalDLSorteR this object was built under

For build a DigitalDLSorter object for train your own model, use
\code{\link{CreateDigitalDLSorterObject}} for loading single-cell real data.
If you want to deconvolute your data using a pre-trained model, see
\code{\link{loadDeconvDataFromFile}} and \code{\link{loadDeconvDataFromSummarizedExperiment}}
for details.}
}}

